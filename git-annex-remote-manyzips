#!/usr/bin/env python

import inspect
import os
import tarfile
import sys
from datetime import datetime
from pathlib import Path
from subprocess import CompletedProcess, run
from shlex import split
from shutil import copy2
from typing import List

from annexremote import Master, ProtocolError, RemoteError, SpecialRemote
from overrides import overrides


LOGFOLDER = Path("./logs/")


class MountingError(RemoteError):
    pass


def log_stuff(log_path: Path, lines: List[str]):
    log_path.parent.mkdir(exist_ok=True)
    with open(log_path, "a") as stdout_file:
        stdout_file.write(f"{datetime.now()}\n")
        stdout_file.write(f"{inspect.stack()[2].function}->")
        stdout_file.write(f"{inspect.stack()[1].function}\n")
        stdout_file.write("\n".join(lines))


def _mkdir(directory: Path):
    try:
        directory.mkdir(parents=True, exist_ok=True)
    except OSError as e:
        raise RemoteError(f"Failed to write to {str(directory)!r}")


def ratarmount(
    mount_source: Path, mount_point: Path, recreate_index: bool = False,
) -> CompletedProcess:
    args = f"ratarmount {mount_source} {mount_point}"
    args = split(args)
    if recreate_index:
        args.append("--recreate-index")
    proc = run(args, capture_output=True, text=True)
    log_stuff(
        mount_point.parent / LOGFOLDER / f"{mount_point.stem}.log",
        [proc.stdout, proc.stderr],
    )
    return proc


def mount_all_and_wait(tar_files: List[Path]):
    processes = [
        ratarmount(tar_file, tar_file.with_suffix("")) for tar_file in tar_files
    ]
    if any(p.returncode != 0 for p in processes):
        failed_procs = [
            processes[i] for i, p in enumerate(processes) if p.returncode != 0
        ]
        for p in failed_procs:
            print(p.args, p.stderr, file=sys.stderr, sep="\n", end="\n\n")
        raise MountingError("Could not ratarmount some of the .tar files.")


def filtermounted(tars: List[Path]) -> List[Path]:
    return [tar_path for tar_path in tars if not tar_path.with_suffix("").is_dir()]


def umount(mount_point: Path):
    """
    "-l" option avoids that pesky "Could not unmount; target is busy" error.
    I found out about it here: https://stackoverflow.com/a/19969471
    I'm not sure yet if it actually works though, or if it'll just give out harder-to-deal errors.
    """
    args = split(f"umount -l {mount_point}")
    proc = run(args, capture_output=True, text=True)
    log_stuff(
        mount_point.parent / LOGFOLDER / f"{mount_point.name}.log",
        [proc.stdout, proc.stderr],
    )
    if proc.returncode != 0:
        raise MountingError(f"Could not unmount {mount_point}")


def delete_from_tar(tar_path: Path, file_to_remove: str):
    args = split(f"tar -v --delete --file={tar_path} {file_to_remove}")
    proc = run(args, capture_output=True, text=True)
    log_stuff(
        tar_path.parent / LOGFOLDER / f"{tar_path.stem}.log", [proc.stdout, proc.stderr]
    )
    if proc.returncode != 0:
        raise RemoteError(
            f"Could not delete {file_to_remove!r} from {tar_path.name!r}."
        )


class ManyTars(SpecialRemote):
    def __init__(self, annex):
        super().__init__(annex)
        self.info = {}
        self.configs = {
            "address_length": "1 for 16 .tars, 2 for 256, and 3 for 4096.",
            "directory": "Folder to store data.",
        }

    def _get_params(self):
        address_length = self.annex.getconfig("address_length")
        address_length = int(address_length) if address_length != "" else 1
        if not 0 < address_length < 3:
            msg = "address_length value should be greater than zero and smaller than 3."
            raise RemoteError(msg)
        directory = self.annex.getconfig("directory")
        if not directory:
            raise RemoteError("You need to set directory=")
        directory = Path(directory).expanduser()
        return address_length, directory

    def initremote(self):
        self.address_length, self.directory = self._get_params()
        self.info = {"directory": self.directory, "address_length": self.address_length}
        _mkdir(self.directory)

    def prepare(self):
        self.address_length, self.directory = self._get_params()
        self.info = {"directory": self.directory, "address_length": self.address_length}
        if not self.directory.is_dir():
            raise RemoteError(f"{str(self.directory)!r} not found.")
        # available_tars = self.directory.glob(r"*.tar")
        # unmounted_tars = filtermounted(available_tars)
        # mount_all_and_wait(unmounted_tars)  # O(1) because all indices are already updated

    def transfer_store(self, key: str, filename: str):
        """

        e.g.:
        filename=".git/annex/objects/qW/pV/SHA256E-s148273064--5880ac1cd05eee90db251c027771b4c9f0a55b7c8b2813c95eff59eef465ebd3.wav/SHA256E-s148273064--5880ac1cd05eee90db251c027771b4c9f0a55b7c8b2813c95eff59eef465ebd3.wav"
        """
        if self.checkpresent(key):
            return
        mount_point = self._get_mount_point(key)
        tar_path = self._get_tar_path(key)
        with tarfile.open(name=tar_path, mode="a:") as tareco:
            tareco.add(filename, arcname=key)
        if mount_point.is_dir():
            umount(mount_point)
            ratarmount(tar_path, mount_point, recreate_index=True)  # O(n)
        else:
            ratarmount(tar_path, mount_point)  # O(n)
            # umount(mount_point)
        if not self.checkpresent(key):
            raise RemoteError("Unknown error while storing the key.")

    def transfer_retrieve(self, key: str, filename: str):
        if not self.checkpresent(key):
            raise RemoteError("Key not present in this remote.")
        mount_point = self._get_mount_point(key)
        tar_path = self._get_tar_path(key)
        if not mount_point.is_dir():
            ratarmount(tar_path, mount_point)  # O(1)
        # TODO: copy to a tempfile then rename
        copy2(str(mount_point / key), filename)

    def checkpresent(self, key: str) -> bool:
        mount_point = self._get_mount_point(key)
        tar_path = self._get_tar_path(key)
        if tar_path.is_file():
            if not mount_point.is_dir():
                ratarmount(tar_path, mount_point)
            file_path = mount_point / key
            if file_path.is_file():
                # umount(mount_point) #
                return True
        return False

    def remove(self, key: str):
        if not self.checkpresent(key):
            return
        tar_path = self._get_tar_path(key)
        mount_point = self._get_mount_point(key)
        delete_from_tar(tar_path, key)  # O(n)
        if mount_point.is_dir():
            umount(mount_point)
            ratarmount(tar_path, mount_point, recreate_index=True)  # O(n)
        else:
            ratarmount(tar_path, mount_point)  # O(n)
            umount(mount_point)  #
        if self.checkpresent(key):
            raise RemoteError("Could not remove.")

    def _get_address(self, key: str) -> str:
        """
        key="SHA256E-s148273064--5880ac1cd05eee90db251c027771b4c9f0a55b7c8b2813c95eff59eef465ebd3.wav"
        """
        parts = key.split("-")
        address = parts[-1][: self.address_length]
        return address

    def _get_mount_point(self, key: str) -> Path:
        return self.directory / self._get_address(key)

    def _get_tar_path(self, key: str) -> Path:
        tar_path = self._get_mount_point(key)
        return tar_path.with_suffix(".tar")

    @overrides
    def getavailability(self) -> str:
        return "local"


def main():
    output = sys.stdout
    sys.stdout = sys.stderr

    master = Master(output)
    remote = ManyTars(master)
    master.LinkRemote(remote)
    master.Listen()


if __name__ == "__main__":
    main()
